--ベクトル・クォータニオン関連の関数読み込み
local vop = require("vector_operation")

--track0:オフセット,0,10,2,0.1
--track1:空間サイズ,0,10000,0,1
--check0:裏面を計算する,1
--file:

--初期化
obj.setoption("antialias",1)
obj.setoption("shadow",1)

--座標軸
local pxvec = {1,0,0}
local pyvec = {0,1,0}
local pzvec = {0,0,1}
local nxvec = {-1,0,0}
local nyvec = {0,-1,0}
local nzvec = {0,0,-1}

--カメラ情報取得
local cam = obj.getoption("camera_param")

--オブジェクト情報を取得
local objzoom = obj.getvalue("zoom")/100.0
local objw = obj.w
local objh = obj.h
local rw = objw/2.0
local rh = objh/2.0
local mergin = 2

--オブジェクトのクォータニオン
local qx = vop.qt(pxvec,obj.rx)
local qy = vop.qt(pyvec,obj.ry)
local qz = vop.qt(pzvec,obj.rz)
local qxy = vop.qq(qx,qy)
local qxyz = vop.qq(qxy,qz)

--オブジェクトの逆回転クォータニオン
local rqx = vop.qt(nxvec,obj.rx)
local rqy = vop.qt(nyvec,obj.ry)
local rqz = vop.qt(nzvec,obj.rz)
local rqxy = vop.qq(rqx,rqy)
local rqxyz = vop.qq(rqxy,rqz)

--法線ベクトル
local n = vop.rotate(nzvec,qxyz)

--オブジェクト座標に中心座標cx,cy,czを反映
local objcpos = {obj.cx,obj.cy,obj.cz}
objcpos = vop.rotate(objcpos,rqxyz)
local objpos = {obj.x,obj.y,obj.z}
objpos = vop.add(objpos,objcpos)


local objvec = {}
objvec[1] = {0,0,0}
objvec[2] = {-rw,-rh,0}
objvec[3] = {rw,-rh,0}
objvec[4] = {rw,rh,0}
objvec[5] = {-rw,rh,0}

local drawflag = false

--反射ベクトル
local refvec = {}
for i=1,5 do
    local targetvec = vop.add(vop.rotate(objvec[i],qxyz),objpos)
    local eyevec = {targetvec[1] - cam.x, targetvec[2] - cam.y, targetvec[3] - cam.z}

    if i == 1 then
        eyevec = vop.unit(eyevec)
    end

    local neyevec = {-eyevec[1],-eyevec[2],-eyevec[3]}
    local rgain = 2.0*vop.dot(n,neyevec)
    local nvec = {rgain*n[1],rgain*n[2],rgain*n[3]}

    if (rgain >= 0) then
        drawflag = true
    end

    refvec[i] = vop.add(eyevec,nvec)
    if i == 1 then
        refvec[i] = vop.unit(refvec[i])
    end
end

if (obj.check0 or drawflag) then
    local ncrossref = vop.cross(pzvec,refvec[1])
    local ndotref = vop.dot(pzvec,refvec[1])
    local thetaref = 180*math.acos(ndotref)/math.pi

    if ncrossref[1] == 0.0 and ncrossref[2] == 0.0 and ncrossref[3] == 0.0 then
        ncrossref = {cam.ux,cam.uy,cam.uz}
    end
    --反射先をtempbufferの正面に回転するクォータニオン
    local refq = vop.qt(ncrossref,-thetaref)

    --参照先の座標と画像サイズを算出
    local maxtx = 0
    local maxty = 0
    local tvec = {}

    for i=1,5 do
        tvec[i] = vop.rotate(refvec[i],refq)
        if i > 1 and tvec[i][3] > 0 then
            local tgain = 1024.0/tvec[i][3]

            for j=1,3 do
                tvec[i][j] = tgain*tvec[i][j]
            end

            local abstx = math.abs(tvec[i][1])
            if abstx > maxtx then
                maxtx = abstx
            end

            local absty = math.abs(tvec[i][2])
            if absty > maxty then
                maxty = absty
            end
        end
    end

    --オブジェクトの形状でアルファマスクを作成
    obj.setoption("blend",0,"force")
    obj.setoption("drawtarget","tempbuffer",objw*2+4*mergin,objh+2*mergin)
    obj.drawpoly(-objw-mergin,-rh,0, 0-mergin,-rh,0, 0-mergin,rh,0, -objw-mergin,rh,0)
    obj.load("figure","四角形",0xffffff,objw,40000)
    obj.drawpoly(0,-rh-mergin,0, objw+2*mergin,-rh-mergin,0, objw+2*mergin,rh+mergin,0, 0,rh+mergin,0)
    obj.load("tempbuffer",0,0,objw+2*mergin,objh+2*mergin)
    obj.setoption("blend","alpha_sub","force")
    obj.drawpoly(0,-rh-mergin,0, objw+2*mergin,-rh-mergin,0, objw+2*mergin,rh+mergin,0, 0,rh+mergin,0)
    obj.load("tempbuffer",objw+2*mergin,0,objw+2*mergin,objh+2*mergin)

    --マスクをキャッシュバッファに退避
    obj.copybuffer("cache:mask","obj")

    local cubew = maxtx*2
    local cubeh = maxty*2

    obj.setoption("blend",0,"force")
    obj.setoption("drawtarget","tempbuffer",cubew,cubeh)

    obj.load("image",file)

    local sW = obj.w/4
    local sH = obj.h/3
    local ofs = obj.track0
    local radius = obj.track1

    if obj.track1 == 0 then
        radius = 10.0*cam.d
    end

    local v1 = {}
    v1[1] = {    -radius,-radius,radius,    radius,-radius,radius,    radius,radius,radius,    -radius,radius,radius}
    v1[2] = {    radius,-radius,radius,    radius,-radius,-radius,    radius,radius,-radius,    radius,radius,radius}
    v1[3] = {    radius,-radius,-radius,    -radius,-radius,-radius,    -radius,radius,-radius,    radius,radius,-radius}
    v1[4] = {    -radius,-radius,-radius,    -radius,-radius,radius,    -radius,radius,radius,    -radius,radius,-radius}

    local v2 = {-radius,-radius,radius,-radius,-radius,-radius,radius,-radius,-radius,radius,-radius,radius}
    local v3 = {radius,radius,radius,radius,radius,-radius,-radius,radius,-radius,-radius,radius,radius}

    local camvec = {0.0 , 0.0, -1024.0}

    --draw cube map
    for i=0,3 do
        local sdvec = {}
        local idx1,idx2,idx3
        for j=0,3 do
            idx1,idx2,idx3 = j*3+1,j*3+2,j*3+3
            local tsd = vop.rotate({v1[i+1][idx1],v1[i+1][idx2],v1[i+1][idx3]},refq)

            sdvec[idx1] = tsd[1] + camvec[1]
            sdvec[idx2] = tsd[2] + camvec[2]
            sdvec[idx3] = tsd[3] + camvec[3]
        end

        obj.drawpoly(sdvec[1],sdvec[2],sdvec[3],sdvec[4],sdvec[5],sdvec[6],sdvec[7],sdvec[8],sdvec[9],sdvec[10],sdvec[11],sdvec[12], i*sW+ofs,sH+ofs, (i+1)*sW-ofs,sH+ofs, (i+1)*sW-ofs,2*sH-ofs, i*sW+ofs,2*sH-ofs)

        if i == 1 then
            local upvec = {}
            local dnvec = {}
            for j=0,3 do
                idx1,idx2,idx3 = j*3+1,j*3+2,j*3+3

                local tup = vop.rotate({v2[idx1],v2[idx2],v2[idx3]},refq)
                upvec[idx1] = tup[1] + camvec[1]
                upvec[idx2] = tup[2] + camvec[2]
                upvec[idx3] = tup[3] + camvec[3]

                local tdn = vop.rotate({v3[idx1],v3[idx2],v3[idx3]},refq)
                dnvec[idx1] = tdn[1] + camvec[1]
                dnvec[idx2] = tdn[2] + camvec[2]
                dnvec[idx3] = tdn[3] + camvec[3]
            end

            obj.drawpoly(upvec[1],upvec[2],upvec[3],upvec[4],upvec[5],upvec[6],upvec[7],upvec[8],upvec[9],upvec[10],upvec[11],upvec[12], i*sW+ofs,0+ofs, (i+1)*sW-ofs,0+ofs, (i+1)*sW-ofs,sH-ofs, i*sW+ofs,sH-ofs)
            obj.drawpoly(dnvec[1],dnvec[2],dnvec[3],dnvec[4],dnvec[5],dnvec[6],dnvec[7],dnvec[8],dnvec[9],dnvec[10],dnvec[11],dnvec[12], i*sW+ofs,2*sH+ofs, (i+1)*sW-ofs,2*sH+ofs, (i+1)*sW-ofs,(3*sH)-ofs, i*sW+ofs,(3*sH)-ofs)

        end
    end

    --キューブマップからオブジェクトの矩形を描画
    local srw = rw/objzoom
    local srh = rh/objzoom
    local smrw = (rw+mergin)/objzoom
    local smrh = (rh+mergin)/objzoom

    obj.load("tempbuffer")
    obj.setoption("drawtarget","tempbuffer",(objw+2*mergin)/objzoom,(objh+2*mergin)/objzoom)
    obj.drawpoly(-srw,-srh,0, srw,-srh,0, srw,srh,0, -srw,srh,0,tvec[2][1]+obj.w/2.0,tvec[2][2]+obj.h/2.0,tvec[3][1]+obj.w/2.0,tvec[3][2]+obj.h/2.0,tvec[4][1]+obj.w/2.0,tvec[4][2]+obj.h/2.0,tvec[5][1]+obj.w/2.0,tvec[5][2]+obj.h/2.0)

    --アルファマスクを適用し，オブジェクトの形状にトリミング
    obj.copybuffer("obj","cache:mask")
    obj.setoption("blend","alpha_sub","force")
    obj.drawpoly(-smrw,-smrh, 0,smrw,-smrh,0, smrw,smrh,0, -smrw,smrh,0)

    --tempbufferを読み込み
    obj.load("tempbuffer")
    obj.setoption("drawtarget","framebuffer")
    obj.setoption("blend",0,"force")
end